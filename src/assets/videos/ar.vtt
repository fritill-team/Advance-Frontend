WEBVTT

1
00:00:02.250 --> 00:00:07.170
حتى الآن في هذه الدورة ، قمنا بإنشاء طلبات الحصول على تأشيرة بشيء يسمى الخيارات

2
00:00:07.410 --> 00:00:08.080
API.

3
00:00:08.100 --> 00:00:13.560
الآن ، لم أقل هذا صراحة في أي نقطة ، ولكن هذه هي الطريقة التي نبني بها التطبيقات.

4
00:00:13.800 --> 00:00:20.160
واجهة برمجة التطبيقات للخيارات هي مجرد طريقة نستخدمها لك لإنشاء مكونات باستخدامها تبدو مثل

5
00:00:20.160 --> 00:00:26.700
هذا حيث لدينا وظيفة البيانات والأساليب والممتلكات والممتلكات المحسوبة وأي خطافات لدورة الحياة

6
00:00:26.700 --> 00:00:27.390
كذلك.

7
00:00:27.900 --> 00:00:33.300
تتم إضافة كل هذه العناصر مباشرة إلى كائن المكون نفسه ، والذي نقوم بتصديره.

8
00:00:33.660 --> 00:00:39.000
لذلك من خلال إنشاء بعض التطبيقات بهذه الطريقة ، فإننا نستخدم فقط ما يُعرف باسم واجهة برمجة التطبيقات للخيارات.

9
00:00:39.000 --> 00:00:42.690
وهذه هي الطريقة التي قدمنا ​​بها بعض الطلبات خلال السنوات القليلة الماضية.

10
00:00:42.930 --> 00:00:46.320
وما زلنا نجعل التطبيقات بهذه الطريقة اليوم أيضًا.

11
00:00:47.130 --> 00:00:54.210
ولكن مع إصدار U3 ، يتيح لنا العرض الآن طريقة أخرى لإنشاء بعض التطبيقات باستخدام ما هو معروف

12
00:00:54.210 --> 00:00:55.770
مثل تكوين API.

13
00:00:56.100 --> 00:01:02.820
الآن ، عندما نستخدم واجهة برمجة التطبيقات للتكوين ، فإننا نحصل بشكل أساسي على إمكانية الوصول إلى وظيفة الإعداد أو الإعداد بالداخل

14
00:01:02.820 --> 00:01:04.190
كائن المكون لدينا.

15
00:01:04.530 --> 00:01:10.770
الآن ، داخل الإعداد هو المكان الذي سنضع فيه جميع طرق بيانات المكونات وخصائص الحساب و

16
00:01:10.770 --> 00:01:11.820
خطافات دورة الحياة.

17
00:01:12.210 --> 00:01:19.080
الآن السبب وراء تقديم تكوين API في الربع الثالث هو أنه يعالج بعض القيود

18
00:01:19.320 --> 00:01:22.390
وعيوب واجهة برمجة التطبيقات للخيارات.

19
00:01:22.710 --> 00:01:29.070
الآن ، أحد العوائق الرئيسية لواجهة برمجة التطبيقات للخيارات هو أنه من الصعب تجميع منطق الميزة معًا.

20
00:01:29.370 --> 00:01:35.670
على سبيل المثال ، بالنسبة للمكون الذي يحصل على البيانات ثم يقوم بتنسيق البيانات ، سيكون لدينا ثلاثة عناصر متحركة

21
00:01:35.670 --> 00:01:41.370
أجزاء ، سيكون لدينا البيانات نفسها ، سيكون لدينا جهاز كمبيوتر وممتلكات ودورة حياة.

22
00:01:41.910 --> 00:01:47.760
الآن ، كل هذه الأجزاء من المنطق منتشرة في المكون بعيدًا عن بعضها البعض ، على الرغم من ذلك

23
00:01:47.760 --> 00:01:49.730
يعملون جميعًا معًا على نفس الميزة.

24
00:01:49.980 --> 00:01:54.990
وقد يكون لديك أيضًا منطق لميزة أخرى في نفس المكون حول هذا ، وهو كل شيء انتشار

25
00:01:54.990 --> 00:01:57.630
إلى قطع منفصلة مختلفة أيضًا.

26
00:01:57.930 --> 00:02:03.720
الآن ، مع ازدياد تعقيد مشاريعك ، قد يصبح من الصعب قراءتها وبالتالي يصعب قراءتها أيضًا

27
00:02:03.720 --> 00:02:04.480
التحديث كذلك.

28
00:02:04.830 --> 00:02:10.080
الآن ، مع تكوين API ، يمكنك تنظيم التعليمات البرمجية الخاصة بك بطريقة تعرض المجموعات المنطق

29
00:02:10.080 --> 00:02:12.890
معًا داخل وظيفة إعداد واحدة.

30
00:02:13.410 --> 00:02:21.270
الآن ، هناك فائدة أخرى لاستخدام تكوين API وهي أنه يمكننا بسهولة إنشاء منطق ورمز قابل لإعادة الاستخدام

31
00:02:21.270 --> 00:02:24.780
مع ما نسميه وظائف التكوين أو تكوين الكرات.

32
00:02:25.080 --> 00:02:29.490
على سبيل المثال ، تخيل أن لديك عنصرين من المكونات التي أدرجت منشورات المدونة في موقع الويب الخاص بك.

33
00:02:30.060 --> 00:02:35.460
في كلا المكونين ، قد تستخدم نفس المنطق مع مجموعة من الخصائص والبيانات المحسوبة و

34
00:02:35.460 --> 00:02:39.100
من أجل استرجاع البيانات وتصفية تلك القوائم.

35
00:02:39.150 --> 00:02:44.400
الآن ، لا تريد تكرار كل هذا المنطق في كل مكون لأنه متماثل تمامًا ، و

36
00:02:44.400 --> 00:02:45.740
هذا مجرد تكرار لشفرتك.

37
00:02:46.020 --> 00:02:51.720
لذا ، باستخدام واجهة برمجة التطبيقات للتكوين ، يمكنك استخراج كل منطق الميزات إلى ما نسميه حاليًا

38
00:02:51.960 --> 00:02:54.700
وظائف التكوين قابلة للتكوين.

39
00:02:55.020 --> 00:03:01.810
ثم نقوم فقط بحقن تلك الوظائف القابلة لإعادة الاستخدام في وظيفة الإعداد حتى لا يكون لدينا أي تكرار للرمز.

40
00:03:02.100 --> 00:03:06.690
الآن ، إذا سبق لك استخدام خطافات التفاعل ، فهذا مفهوم مشابه جدًا.

41
00:03:07.320 --> 00:03:12.480
لذا فهما الفائدةتان الرئيسيتان لاستخدام تكوين API بدلاً من واجهة برمجة التطبيقات للخيارات.

42
00:03:12.600 --> 00:03:15.390
لكن تذكر أن هذا اختياري تمامًا.

43
00:03:15.390 --> 00:03:16.610
ليس عليك استخدامه.

44
00:03:16.800 --> 00:03:23.280
لا يزال بإمكانك إنشاء عدد قليل من التطبيقات باستخدام خيارات API فقط ، كما فعلنا حتى الآن وللصغار ،

45
00:03:23.280 --> 00:03:24.330
مشاريع بسيطة.

46
00:03:24.330 --> 00:03:31.080
ما زلت أفعل ذلك ، ومع ذلك ، بالنسبة للمشاريع الأكبر التي تتطلب مزيدًا من التنظيم ، والمزيد من إعادة استخدام الكود

47
00:03:31.080 --> 00:03:32.640
ومنطق أكثر تعقيدًا.

48
00:03:32.880 --> 00:03:38.940
أعتقد أن استخدام تكوين API مناسب بشكل أفضل ليس طوال الوقت ، ولكن في كثير من الأحيان.

49
00:03:39.240 --> 00:03:45.270
وبالتأكيد عندما نبدأ العمل مع المصادقة وقواعد البيانات في المشاريع المستقبلية ، فإن التكوين

50
00:03:45.270 --> 00:03:47.370
API سوف يساعدنا كثيرا.

51
00:03:47.550 --> 00:03:52.860
وبالمناسبة ، يمكنك في الواقع استخدام مزيج من الاثنين إذا كنت ترغب في ذلك ، حتى تتمكن من استخدام التكوين

52
00:03:52.860 --> 00:03:58.000
واجهة برمجة التطبيقات (API) لبعض المنطق ولا تزال تستخدم واجهة برمجة تطبيقات الخيارات للمنطق البسيط أيضًا.

53
00:03:58.230 --> 00:04:04.140
من الآن فصاعدًا ، سنستخدم واجهة برمجة تطبيقات التكوين حوالي 80 بالمائة من الوقت ، ولكن ربما لا نزال

54
00:04:04.140 --> 00:04:09.140
انغمس في خيارات API لإعداد أشياء معينة في مكوناتنا أيضًا.

55
00:04:10.120 --> 00:04:15.430
لذلك في هذا الفصل ، سنتعلم كل شيء عن تكوين API ، وبمجرد أن نتعلم الأساسيات

56
00:04:15.430 --> 00:04:21.850
خلال الفصول القليلة التالية ، سننشئ تطبيقًا مصغرًا لأسلوب المدونة مثل هذا حتى نتمكن من سرده

57
00:04:21.850 --> 00:04:22.780
جميع مدوناتنا.

58
00:04:22.780 --> 00:04:27.580
يمكننا أن نرى تفاصيل المدونة ، ويمكننا أن نرى أن لدينا علامات مختلفة هنا أيضًا ، ونحن

59
00:04:27.580 --> 00:04:30.250
يمكن النقر على اليمين لتصفية المدونات.

60
00:04:30.430 --> 00:04:32.950
لذلك نعرض فقط المدونات التي تحتوي على هذه العلامات.

61
00:04:33.100 --> 00:04:35.990
يمكننا أيضًا إنشاء منشورات جديدة باستخدام هذا النموذج.

62
00:04:36.250 --> 00:04:39.250
لذلك هذا ما سنقوم ببنائه خلال الفصلين أو الفصول الثلاثة القادمة.

63
00:04:39.430 --> 00:04:43.540
لكن أولاً وقبل كل شيء ، أريد فقط أن أتحدث عن أساسيات تكوين API.

